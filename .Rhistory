a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(10000000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(100, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(c("123123", "123123", "123123", "123123", "123123"), 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(c("123123", "123123", "123123", "123123", "123123"), 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(c("123123", "123123", "123123", "123123", "123123"), 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample.int(5, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(c("123123", "123123", "123123", "123123", "123123"), 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(c("123123", "123123", "123123", "123123", "123123"), 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, c("123123", "123123", "123123", "123123", "123123")[sample.int(5, 1)])
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, c("123123", "123123", "123123", "123123", "123123")[sample.int(5, 1)])
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, c("123123", "123123", "123123", "123123", "123123")[sample.int(5, 1)])
Rprof(NULL)
summaryRprof()
buh <- c("123123", "123123", "123123", "123123", "123123")
Rprof()
a <- replicate(100000, sample(buh, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(buh, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, sample(buh, 1))
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, buh[sample.int(length(buh), 1)])
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, buh[sample.int(length(buh), 1)])
Rprof(NULL)
summaryRprof()
Rprof()
a <- replicate(100000, buh[sample.int(length(buh), 1)])
Rprof(NULL)
summaryRprof()
option
option <- "<a>"
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
if (parts == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
parts
parts
option
parts
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
parts
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
parts
option <- parts
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
parts
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
parts
new_option <- paste0(parts, collaps = "")
new_option
new_option <- paste0(parts, collaps = TRUE)
new_option
paste(parts, collapse = "")
# 2. Trampoline recursive function? ------------------------------------------------------
trampoline <- function(f, ...) {
function(...) {
ret <- f(...)
while (inherits(ret, "recursion")) {
ret <- eval(as.call(c(f, unclass(ret))))
}
ret
}
}
recur <- function(...) {
structure(list(...), class = "recursion")
}
cfg <- trampoline(function(option) {
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
if (parts == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
new_option <- paste(parts, collapse = "")
return(cfg(new_option))
})
cfg <- trampoline(function(option, grammar) {
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
if (parts == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
new_option <- paste(parts, collapse = "")
return(cfg(new_option, grammar = grammar))
})
# 2. Trampoline recursive function? ------------------------------------------------------
trampoline <- function(f, ...) {
function(...) {
ret <- f(...)
while (inherits(ret, "recursion")) {
ret <- eval(as.call(c(f, unclass(ret))))
}
ret
}
}
recur <- function(...) {
structure(list(...), class = "recursion")
}
cfg <- trampoline(function(option, grammar) {
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
if (parts == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
new_option <- paste(parts, collapse = "")
return(cfg(new_option, grammar = grammar))
})
grammar
cfg(option = "<a>", grammar = gramamr)
cfg(option = "<a>", grammar = grammar)
cfg <- trampoline(function(option, grammar) {
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
if (length(parts) == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
new_option <- paste(parts, collapse = "")
return(cfg(new_option, grammar = grammar))
})
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
cfg(option = "<a>", grammar = grammar)
# Define grammar
g <- create_grammar(eq = "<eq> <op> <eq>,
<eq> <op> numeric,
<eq> <op> sp,
<eq> <op> (<eq>),
sp,
<f> (sp),
<f> (<eq>),
numeric",
f = paste(functions, collapse = ","),
op = paste(operators, collapse = ","))
g
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
cfg(option = "<eq>", grammar = g)
grammar <- g
option <- "<eq>"
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
parts
if (length(parts) == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
parts
new_option <- paste(parts, collapse = "")
option <- new_option
parts <- option %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
parts
if (length(parts) == 0) return(option)
for(i in seq_along(parts)) {
parts[i] <- grammar[[parts[i]]][sample.int(length(grammar[[parts[i]]]), 1)]
}
parts
option
parts
parts
option
str(parts)
option %>%
regmatches(., gregexpr("<(.*?)>", .))
gregexpr("<(.*?)>", option)
option %>%
regmatches(., gregexpr("<(.*?)>", .))
strsplit(option, "<(.*?)>")
optin_rest <- option %>% strsplit("<(.*?)>") %>% unlist()
option_rest <- option %>% strsplit("<(.*?)>") %>% unlist()
option_rest
nonterminals <- fun %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
# get vector with terminals "" for nonterminals
terminals <- fun %>% strsplit("<(.*?)>") %>% unlist()
# in case no nonterminals exist return function
if (length(nonterminals) == 0) return(fun)
# get values for nonterminals
for(i in seq_along(nonterminals)) {
nonterminals[i] <- grammar[[nonterminals[i]]][
sample.int(length(grammar[[nonterminals[i]]]), 1)]
}
fun
fun <- option
nonterminals <- fun %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
# get vector with terminals "" for nonterminals
terminals <- fun %>% strsplit("<(.*?)>") %>% unlist()
# in case no nonterminals exist return function
if (length(nonterminals) == 0) return(fun)
# get values for nonterminals
for(i in seq_along(nonterminals)) {
nonterminals[i] <- grammar[[nonterminals[i]]][
sample.int(length(grammar[[nonterminals[i]]]), 1)]
}
#create new fun string
terminal[terminals == ""]
#create new fun string
terminals[terminals == ""]
nonterminals
#create new fun string
terminals[terminals == ""] <- nonterminals
terminals
fun
cfg <- trampoline(function(fun, grammar) {
# get nonterminal
nonterminals <- fun %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
# get vector with terminals "" for nonterminals
terminals <- fun %>% strsplit("<(.*?)>") %>% unlist()
# in case no nonterminals exist return function
if (length(nonterminals) == 0) return(fun)
# get values for nonterminals
for(i in seq_along(nonterminals)) {
nonterminals[i] <- grammar[[nonterminals[i]]][
sample.int(length(grammar[[nonterminals[i]]]), 1)]
}
#create new fun string
terminals[terminals == ""] <- nonterminals
new_fun <- paste(terminals, collapse = "")
return(cfg(new_fun, grammar = grammar))
})
cfg(fun = "<eq>", grammar = g)
fun <- "<eq>"
g
cfg <- trampoline(function(fun, grammar) {
# get nonterminal
nonterminals <- fun %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
# get vector with terminals "" for nonterminals
terminals <- fun %>% strsplit("<(.*?)>") %>% unlist()
# in case no nonterminals exist return function
if (length(nonterminals) == 0) return(fun)
# get values for nonterminals
for(i in seq_along(nonterminals)) {
sample_id <- sample.int(length(grammar[[nonterminals[i]]]), 1)
print(sample_id)
nonterminals[i] <- grammar[[nonterminals[i]]][sample_id]
}
#create new fun string
terminals[terminals == ""] <- nonterminals
new_fun <- paste(terminals, collapse = "")
return(cfg(new_fun, grammar = grammar))
})
cfg(fun = "<eq>", grammar = g)
cfg(fun = "<eq>", grammar = g)
cfg(fun = "<eq>", grammar = g)
cfg(fun = "<eq>", grammar = g)
cfg(fun = "<eq>", grammar = g)
funs <- "abs(<eq><op>sp)"
fun <- "abs(<eq><op>sp)"
# get nonterminal
nonterminals <- fun %>%
regmatches(., gregexpr("<(.*?)>", .)) %>%
unlist()
nonterminals
# get vector with terminals "" for nonterminals
terminals <- fun %>% strsplit("<(.*?)>") %>% unlist()
terminals
nonterminals
terminals
fun
fun %>% strsplit("<", fixed = TRUE)
fun %>% strsplit("<", fixed = TRUE)%>% strsplit(">", fixed = TRUE)
# get vector with terminals "" for nonterminals
terminals <- fun %>%
strsplit("<(.*?)>") %>% unlist()
terminals
fun %>%
strsplit("<(.*?)>")
fun %>%
strsplit("<[.*?]>") %>% unlist()
fun %>%
strsplit("<(.*?/>)>") %>% unlist()
fun %>%
strsplit("<(.*?\>)>") %>% unlist()
fun %>%
strsplit("<(.*?^>)>") %>% unlist()
fun %>%
strsplit("<(.*?)>") %>% unlist()
fun %>%
strsplit("<(.*)>") %>% unlist()
fun %>%
strsplit("<(.*?[^>])>") %>% unlist()
fun %>%
strsplit("<(.?)>") %>% unlist()
fun %>%
strsplit("<(.*?)>") %>% unlist()
fun %>% gsub("><", "> <", .) %>%
strsplit("<(.*?)>") %>% unlist()
fun %>% gsub("><", "> <", .) %>%
strsplit("<(.*?)>") %>% unlist() %>% str()
fun %>% gsub("><", "> <", .)
fun %>%
strsplit("\\(.*?\\)") %>% unlist()
fun %>%
strsplit("\\(.*?\\)")
fun %>%
strsplit("\\<(.*?\\)>")
fun %>%
strsplit("<\\(.*?\\)>")
fun %>% strsplit("<")
nonterminals
chartr("iXs", "why", x)
x
x <- NULL
chartr("iXs", "why", x)
x <- "MiXeD cAsE 123"
chartr("iXs", "why", x)
